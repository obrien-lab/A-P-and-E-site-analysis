#!/usr/bin/perl
# ===========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#                     Center for Information Technology (CIT)
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software is freely available
#  to the public for use.  The Center for Information Technologyand the U.S.
#  Government have not placed any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, CIT and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. CIT and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author and the "NIH Biowulf Cluster" in any work or product
#  based on this material.
#
# ===========================================================================

# $Revision: 1.14 $
# $Author: sb $
# $Date: 2004/03/12 16:54:43 $

#
# swarm - submit a list of independent commands to the
#         batch system, distributing the commands one
#         per processor by default. bundle option to run
#         n commands per processor, one after the other.

# 13-Sep-2000 modified to accept all PBS command options,
#             with no error checking. changed -c to -f to
#             specify swarm command file because -c is a
#             PBS option.

# 11-Dec-2000 modified to allow user-specified -l option
#             while making sure that "-l nodes=1" is present
#             on the qsub command line.
#
#             modified swarm  to simply issue the user-provided
#             commands in the background, followed by the "wait"
#             shell command that waits for those processes to
#             complete before continuing. No longer need to use
#             multirun.

#  6-Feb-2004 implemented bundle option (some batch systems refer
#             to "arrays") to run a set of commands sequentially.
#             Standard swarm runs one command per processor; with
#             bundling runs "n" commands per processor, one after
#             the other. At face value your jobs will take "n" times
#             longer to complete than standard swarm. However, if
#             there are certain advantages: fewer swarm jobs and
#             output files to keep track of; lower overhead due to
#             scheduling and job startup; and potential disk cache
#             benefits.
#
#             Reuses the -b switch, using the code infrastructure
#             from old "multirun" code. multirun code expunged.
#             Log summary of the command.

# Initialize

$programname = "swarm";
$nodesequals = "nodes=";  # NIH qsub script requires nodes= on commandline
$loption = "-l $nodesequals" . "1"; # default command line option '-l nodes=1'
$ProcsPerNode = "1";     # number of processors per node is 1
$CmdsPerProcessor = 1;  # by default run one command per processor
$home =  $ENV{'HOME'};
$logfile = "$home/swarm.log"; # log some information about the job
chop($user = `/usr/bin/whoami`);        # for logging purposes only
chop($host = `/bin/hostname`);  # logging

chop($pwd = `/bin/pwd`);        # print working directory
$tmpdir = "$pwd/.$programname"; # directory for temporary files
$pid = "$$";            # process-id
$tmprmcmdfile = "";     # used to remember names of files to delete

chop($date = qx{ date +"%b %d %Y %T" });

$cmdcount = 0;     # count of all commands
$nodecount = 0;    # count of nodes required

$qsubcount = 0;    # count of number of submits
$qsubthrottle = 5; # sleep 1 sec for every qsubthrottle submits

$userPBSoptions = "";

# record the command line, for debugging
$commandline = $0;
for ($i = 0; $i <= $#ARGV; $i++) {
  $commandline .= " $ARGV[$i]";
}

$usage = "\
Usage: $programname -f cmdfile [-n #processes] [-b #commands] [-d] [-h] [qsub-options]\
\
  -f file  name of file with list of commands to execute\
  -n #     (default 1) number of processes to run per node\
  -h       print this help message
  -d       print debug information; do not submit jobs\
  -b #     bundle # commands per processor and run sequentially
  others   you may also specify PBS qsub options (see an qsub)\
\
";

# Process commandline arguments

require 'getopts.pl';           # from the Perl library [/usr/lib/perl]

# Options d, h, f, and n are swarm options.
# The rest are PBS qsub options.
&Getopts('dhf:n:a:A:b:c:C:e:hIj:k:l:m:M:N:o:p:q:r:S:u:v:W:');

# Always offer help first if requested
if ($opt_h) { # print help message and exit
    print $usage;
    exit;
}

# After getopts, argv should be -1 for this script.
die "ERROR: excess commandline arguments. See $programname -h\n" if ($#ARGV > -1 || $#ARGV < -1);

# Also, swarm MUST be called with -f option
die "ERROR: must specify '-f cmdfile'  See $programname -h\n" if (! $opt_f);

$DEBUG = 0;  # debug output turned off by default
$DEBUG = 1 if $opt_d;

$BUNDLE = 0;            # standard swarm does not bundle
if ($opt_b) { # set number of sequential commands per processor
    $CmdsPerProcessor = $opt_b;
    $BUNDLE = 1;        # bundle commands enabled
    print "[main] -b commands per processor is '$CmdsPerProcessor'\n" if $DEBUG;
}

if ($opt_n) { # set number of processes per node
    $ProcsPerNode = $opt_n;
    print "[main] -n processes is '$ProcsPerNode'\n" if $DEBUG;
}

if ($opt_f) { # set filename containing list of commands
    $Commandfile = $opt_f;
    print "[main] command file is '$Commandfile'\n" if $DEBUG;
    open(COMMANDFILE, "$Commandfile") || die "Error opening $Commandfile: $!\n";
}

# Initialize filenames (done after swarm options processed so that
# bundled commands can be distiguished from non-bundled)

$tmpbase .= $programname . ($BUNDLE ? "b" : "");  # tmp base filename (swarm)
$tmpcmdbasefile = "$tmpdir/cmd-$tmpbase";    # command script basename
$tmpctrlbasefile = "$tmpdir/ctrl-$tmpbase";  # control script basename

# Now process user-supplied PBS qsub options
# (see man qsub for complete list)

$userPBSoptions .= "#PBS -a $opt_a\n" if ($opt_a);
$userPBSoptions .= "#PBS -A $opt_A\n" if ($opt_A);
$userPBSoptions .= "#PBS -c $opt_c\n" if ($opt_c);
$userPBSoptions .= "#PBS -C $opt_C\n" if ($opt_C);
$userPBSoptions .= "#PBS -e $opt_e\n" if ($opt_e);
$userPBSoptions .= "#PBS -h\n" if ($opt_h);
$userPBSoptions .= "#PBS -I\n" if ($opt_I);
$userPBSoptions .= "#PBS -j $opt_j\n" if ($opt_j);
$userPBSoptions .= "#PBS -k $opt_k\n" if ($opt_k);
if ($opt_l) {
  # User provided -l options (by default swarm runs "qsub -l nodes=1")
  # Make sure that if nodes= is specified that the value is "1"
  # Insert nodes=1 if not specified
  if ($opt_l =~ /$nodesequals/) {
    $opt_l =~ s/nodes=\d+/nodes=1/;     # force it to nodes=1
    $loption = "-l $opt_l";
  } else {
    $loption = "-l " . $nodesequals . "1,$opt_l";       # insert nodes=1
  }

print "[main] loptions is '$loption'\n" if $DEBUG;
}
$userPBSoptions .= "#PBS -m $opt_m\n" if ($opt_m);
$userPBSoptions .= "#PBS -M $opt_M\n" if ($opt_M);
$userPBSoptions .= "#PBS -N $opt_N\n" if ($opt_N);
$userPBSoptions .= "#PBS -o $opt_o\n" if ($opt_o);
$userPBSoptions .= "#PBS -p $opt_p\n" if ($opt_p);
$userPBSoptions .= "#PBS -q $opt_q\n" if ($opt_q);
$userPBSoptions .= "#PBS -r $opt_r\n" if ($opt_r);
$userPBSoptions .= "#PBS -S $opt_S\n" if ($opt_S);
$userPBSoptions .= "#PBS -u $opt_u\n" if ($opt_u);
$userPBSoptions .= "#PBS -v $opt_v\n" if ($opt_v);
$userPBSoptions .= "#PBS -W $opt_W\n" if ($opt_W);


# Main

print "[main] tmpdir is $tmpdir\n" if $DEBUG;

mkdir $tmpdir,0755 || die "Error while trying to create directory $tmpdir: $!\n";

# Read list of commands from command file

while (<COMMANDFILE>) {
    chomp;

    # consider lines with leading # as comments
    next if /^\s*#/;
    # ignore blank lines
    next if /^\s*$/;
    # we have (the next) full node when the number of commands
    # is evenly divisible by the number of processors per node
    # times the number of commands per processor (defaults to 1)
    $fullnode = ! (++$cmdcount%($ProcsPerNode * $CmdsPerProcessor));

    # Calculate an array index i that ranges from 1..ProcsPerNode*CmdsPerProcessor
    $i = $cmdcount%($ProcsPerNode * $CmdsPerProcessor);
    $i = ($ProcsPerNode * $CmdsPerProcessor) if ($i == 0);
    $cmdlist[$i] = $_;
    print "[main] command $cmdcount: '$cmdlist[$i]'\n" if $DEBUG;

    if ( $fullnode ) {
        ++$nodecount;
        # generate a script of ProcsPerNode commands
        # and a corresponding control script if necessary
        &gencmdscript($nodecount);
        &genctrlscript($nodecount);
        &genqsub($nodecount);
    }
} # end while

if ( !$fullnode ) {
    ++$nodecount;
    # call genscript one last time, in case there were less
    # than $ProcsPerNode commands left over. And the corresponding
    # control script
    &gencmdscript($nodecount);
    &genctrlscript($nodecount);
    &genqsub($nodecount);
}

close(COMMANDFILE);



# subroutines

sub gencmdscript {
# generate command scripts to run bundles of commands
    local ($node) = @_;
    local ($beginscript) = "#!/bin/tcsh\
#\
# [script generated by $programname $date]\
";
    return if ! ($BUNDLE); # return if not using BUNDLE method

    undef(%tmprmcmdfile);    # clear list of files that will need to be rm'd

    # initialize script array of commands for each processor to null
    # $p from 0..ProcsPerNode-1
    for ($p = 0; $p <= $ProcsPerNode-1; $p++) {
      $script{$p} = "";   # reset scripts
    }

    # Evenly divide the users commands in cmdlist among each processor.
    # Put the commands in an array indexed by the processor number
    # (0, 1, etc).  This is where the commands are bundled so they will
    # run sequentially
    for ($i = 1; $i <= $#cmdlist; $i++) {
      $p = $i % $ProcsPerNode;  # mod will give a number from 0..ProcsPerNode-1
      print "  [gencmdscript] proc $p '$cmdlist[$i]'\n" if $DEBUG;
      $script{$p} .= "$cmdlist[$i]\n";
    }
    @cmdlist = ();  # trickery--reset cmdlist now so the next step can reuse it

    # Now for each processor create a simple file containing the users
    # commands (saved in script array)
    for ($p = 0; $p <= $ProcsPerNode-1; $p++) {
      # (only when there are commands to run!)
      if ($script{$p}) {

        # trickery--standard swarm creates one control file and submits
        # it. bundle creates one control file which submits two command files.

        # In this step 1) create command script files, 2) remember the
        # names of those files so they can be deleted in the cleanup
        # section of the control script, 3) add the names of the command
        # script files to the cmdlist array to be processed "like standard
        # swarm" would do in the genqsub routine

        # create filename by including node and  processor number
        local($tmpfile) = "$tmpcmdbasefile$node" . "n" . $p . "p$pid";

        # cmdlist index starts at 1, so add one to $p (which starts at 0)
        $cmdlist[$p+1] = "$tmpfile";
        $tmprmcmdfile{$p} = "$tmpfile";   # remember file to clean up at end

        # now write the commands to command files
        open(GENCMDSCRIPT, ">$tmpfile") || die "Error opening $tmpfile: $!\n";
        print "  [gencmdscript] command script node $node, proc $p, '$tmpfile'\n" if $DEBUG;
        print GENCMDSCRIPT $beginscript;
        print GENCMDSCRIPT "#\
# this file is $tmpfile\
#\
cd $pwd\
";
        print GENCMDSCRIPT $script{$p};   # write commands to the file
        # print "  [gencmdscript] '$script{$p}'\n" if $DEBUG;
        close(GENCMDSCRIPT);
        # make command script executable (chmod needs filename in quotes)
        chmod 0755,"$tmpfile";
      } # end if $script
   } # end for
}



sub genctrlscript {
# generate control script which gets submitted to batch system
    local ($node) = @_;
    local ($tmpfile) = "$tmpctrlbasefile$node" ."n$pid";

    open(GENCTRLSCRIPT, ">$tmpfile") || die "Error opening $tmpfile: $!\n";
    print "  [genctrlscript] control script $node, '$tmpfile'\n" if $DEBUG;
    &bodyctrlscript ($node);
    close(GENCTRLSCRIPT);
    # make control script executable (chmod needs filename in quotes)
    chmod 0755,"$tmpfile";
    @cmdlist = ();   # reset the command array before returning
}



sub bodyctrlscript {
    local ($node) = @_;
    local ($tmpname) = "$tmpbase$node" ."n$pid";
    local ($tmpctrlfile) = "$tmpctrlbasefile$node" ."n$pid";
    local ($tmpmail) = "#no PBS -m be";
    local ($tmpdebug) = "";

# Note: the name argument for PBS -N must begin with an
# alphabetic, no special symbols, and no more than 15 characters

    $tmpdebug = "# " if ($DEBUG);
    $script = "#!/bin/tcsh\
# [script generated by $programname $date]\
#\
# $commandline\
#\
# this file is $tmpctrlfile\
#\
# [swarm-generated PBS options]\
#PBS -e $tmpname.e\
#PBS -o $tmpname.o\
#PBS -N $tmpname\
#\
# [user-supplied PBS options]\
$userPBSoptions\
#\
set path=(/usr/local/mpich/bin \$path)\
cd $pwd\
";

    # append the user commands to be run to script
    # note use of "&" to put jobs in background, and
    # "wait" command which waits for processes to complete
    for ($i = 1; $i <= $#cmdlist; $i++) {
      print "  [bodyctrlscript] '$cmdlist[$i]'\n" if $DEBUG;
      $script .= "$cmdlist[$i] &\n" if ($cmdlist[$i]);
    }
    $script .= "wait\n";

    $script .= "# Cleanup\n";

    if ($BUNDLE) {
    # bundle has one command file per processor to be cleaned up,
    # previously recorded in tmprmcmdfile array
      foreach $key (keys %tmprmcmdfile) {
        $script .= "$tmpdebug rm $tmprmcmdfile{$key}\n";
      }
    }

    # and delete the main controlling file when all done
    $script .= "$tmpdebug rm $tmpctrlfile\n";

print GENCTRLSCRIPT $script;
}



sub genqsub {
# Submit job to batch using qsub
    local ($node) = @_;
    local ($tmpctrlfile) = "$tmpctrlbasefile$node" ."n$pid";

    $qsubcount++;    # increment number of times we have been called

    $script = "qsub $loption $tmpctrlfile";
    print "  [genqsub] $script\n\n" if $DEBUG;
    system ("$script") if ! ($DEBUG);

    # sleep occasionally to avoid overwhelming PBS with hundreds
    # continuous submits
    sleep 1 if ( $qsubcount % $qsubthrottle == 0) && ! ($DEBUG);
}

# log some useful information

open(LOG, ">>$logfile") || die "Cannot open logfile $logfile $!\n";
chmod 0666, $logfile;
print LOG "$date $host $pid: user=$user pwd=$pwd ncmds=$cmdcount command=$commandline\n";
close(LOG);

# End

